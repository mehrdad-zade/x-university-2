"""Initial auth tables

Revision ID: 6e7ad66a2f10
Revises: 
Create Date: 2025-08-11 05:41:11.394934

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision: str = '6e7ad66a2f10'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name: str) -> bool:
    """Check if a table exists in the database."""
    connection = op.get_bind()
    inspector = inspect(connection)
    return table_name in inspector.get_table_names()


def index_exists(index_name: str, table_name: str) -> bool:
    """Check if an index exists on a table."""
    connection = op.get_bind()
    inspector = inspect(connection)
    try:
        indexes = inspector.get_indexes(table_name)
        return any(idx['name'] == index_name for idx in indexes)
    except:
        return False


def column_exists(table_name: str, column_name: str) -> bool:
    """Check if a column exists in a table."""
    connection = op.get_bind()
    inspector = inspect(connection)
    try:
        columns = inspector.get_columns(table_name)
        return any(col['name'] == column_name for col in columns)
    except:
        return False


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if users table exists and what its structure is
    if table_exists('users'):
        # Check if the existing users table has the old integer-based structure
        connection = op.get_bind()
        result = connection.execute(sa.text("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'users' AND column_name = 'id'
        """)).fetchone()
        
        if result and 'integer' in str(result[1]):
            # Existing table has integer ID - we need to add missing columns only
            try:
                # Add missing columns if they don't exist
                if not column_exists('users', 'full_name'):
                    op.add_column('users', sa.Column('full_name', sa.String(length=255), nullable=True))
                    # Update existing records with a default value
                    connection.execute(sa.text("UPDATE users SET full_name = email WHERE full_name IS NULL"))
                    # Make it not null after setting values
                    op.alter_column('users', 'full_name', nullable=False)
                
                if not column_exists('users', 'role'):
                    op.add_column('users', sa.Column('role', sa.String(length=20), nullable=True))
                    # Set default role for existing users
                    connection.execute(sa.text("UPDATE users SET role = 'student' WHERE role IS NULL"))
                    op.alter_column('users', 'role', nullable=False)
                
                if not column_exists('users', 'email_verified'):
                    op.add_column('users', sa.Column('email_verified', sa.Boolean(), nullable=True))
                    connection.execute(sa.text("UPDATE users SET email_verified = true WHERE email_verified IS NULL"))
                    op.alter_column('users', 'email_verified', nullable=False)
                
                if not column_exists('users', 'last_login'):
                    op.add_column('users', sa.Column('last_login', sa.DateTime(timezone=True), nullable=True))
                
                # Rename hashed_password to password_hash if needed
                if column_exists('users', 'hashed_password') and not column_exists('users', 'password_hash'):
                    op.alter_column('users', 'hashed_password', new_column_name='password_hash')
                
            except Exception as e:
                print(f"Warning: Could not add column: {e}")
        
    else:
        # Create new users table with integer structure
        op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False, primary_key=True, autoincrement=True),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=False),
        sa.Column('role', sa.String(length=20), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('email_verified', sa.Boolean(), nullable=False),
        sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
        )
    
    # Create indexes for users table if they don't exist
    if table_exists('users') and not index_exists('ix_users_email', 'users'):
        op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    if table_exists('users') and not index_exists('ix_users_id', 'users'):
        op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    
    # Create sessions table compatible with existing users table structure
    if not table_exists('sessions'):
        # Check if users table has integer or UUID id
        connection = op.get_bind()
        result = connection.execute(sa.text("""
            SELECT data_type 
            FROM information_schema.columns 
            WHERE table_name = 'users' AND column_name = 'id'
        """)).fetchone()
        
        if result and 'integer' in str(result[0]):
            # Create sessions table with integer foreign key
            op.create_table('sessions',
            sa.Column('id', sa.Integer(), nullable=False, primary_key=True, autoincrement=True),
            sa.Column('user_id', sa.Integer(), nullable=False),  # Integer to match existing users.id
            sa.Column('refresh_token_hash', sa.String(length=255), nullable=False),
            sa.Column('user_agent', sa.Text(), nullable=True),
            sa.Column('ip_address', sa.String(length=45), nullable=True),
            sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('is_active', sa.Boolean(), nullable=False),
            sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
            sa.PrimaryKeyConstraint('id')
            )
        else:
            # Create sessions table with integer foreign key (standardized on integers)
            op.create_table('sessions',
            sa.Column('id', sa.Integer(), nullable=False, primary_key=True, autoincrement=True),
            sa.Column('user_id', sa.Integer(), nullable=False),  # Integer to match users.id
            sa.Column('refresh_token_hash', sa.String(length=255), nullable=False),
            sa.Column('user_agent', sa.Text(), nullable=True),
            sa.Column('ip_address', sa.String(length=45), nullable=True),
            sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
            sa.Column('is_active', sa.Boolean(), nullable=False),
            sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
            sa.PrimaryKeyConstraint('id')
            )
    
    # Create indexes for sessions table if they don't exist
    if table_exists('sessions') and not index_exists('ix_sessions_expires_at', 'sessions'):
        op.create_index(op.f('ix_sessions_expires_at'), 'sessions', ['expires_at'], unique=False)
    if table_exists('sessions') and not index_exists('ix_sessions_id', 'sessions'):
        op.create_index(op.f('ix_sessions_id'), 'sessions', ['id'], unique=False)
    if table_exists('sessions') and not index_exists('ix_sessions_refresh_token_hash', 'sessions'):
        op.create_index(op.f('ix_sessions_refresh_token_hash'), 'sessions', ['refresh_token_hash'], unique=False)
    if table_exists('sessions') and not index_exists('ix_sessions_user_id', 'sessions'):
        op.create_index(op.f('ix_sessions_user_id'), 'sessions', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop sessions table and its indexes if they exist
    if table_exists('sessions'):
        if index_exists('ix_sessions_user_id', 'sessions'):
            op.drop_index(op.f('ix_sessions_user_id'), table_name='sessions')
        if index_exists('ix_sessions_refresh_token_hash', 'sessions'):
            op.drop_index(op.f('ix_sessions_refresh_token_hash'), table_name='sessions')
        if index_exists('ix_sessions_id', 'sessions'):
            op.drop_index(op.f('ix_sessions_id'), table_name='sessions')
        if index_exists('ix_sessions_expires_at', 'sessions'):
            op.drop_index(op.f('ix_sessions_expires_at'), table_name='sessions')
        op.drop_table('sessions')
    
    # Drop users table and its indexes if they exist
    if table_exists('users'):
        if index_exists('ix_users_id', 'users'):
            op.drop_index(op.f('ix_users_id'), table_name='users')
        if index_exists('ix_users_email', 'users'):
            op.drop_index(op.f('ix_users_email'), table_name='users')
        op.drop_table('users')
    # ### end Alembic commands ###
